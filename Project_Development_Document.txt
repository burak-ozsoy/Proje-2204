- Development Platform and Group Collaboration -

Platform Used:

The code for the networked peer-to-peer chat application was developed collaboratively on a Windows platform using Python 3.x. We utilized a shared GitHub repository to manage our codebase and facilitate collaboration.

Challenges Faced:

Networking Setup: Configuring the network settings for local area network communication posed initial challenges, especially in handling broadcast messages.
Encryption Implementation: Implementing secure communication with encryption using the Diffie-Hellman key exchange algorithm required understanding cryptographic concepts and libraries.
Thread Synchronization: Coordinating multiple threads for peer discovery, chat initiation, and response required careful synchronization to avoid race conditions.

Group Members and Workload Division:

Workload division and decision-making were collaborative processes within the group. We regularly communicated and discussed various aspects of the project, including design choices, implementation strategies, and troubleshooting solutions. We used GitHub's issue tracking system to report and address any issues or challenges encountered during development. Each section of the code was developed through joint decision-making, where we collectively evaluated ideas, resolved challenges, and reached consensus on the best approaches.

Progression and Problem-Solving

Throughout the development process, we progressed iteratively by addressing tasks incrementally. We actively engaged in discussions, shared insights, and provided feedback to refine our solutions. Problem-solving was a collective effort, with each member contributing their expertise and brainstorming solutions to overcome challenges.

Overall, our collaborative workflow enabled us to effectively coordinate our efforts, leverage each other's strengths, and iteratively improve the quality of our codebase.





